?rev
ggplot(PCA, aes(x = V1, y = rev(V2))) + geom_point() + theme_bw(15)
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15)
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
PCA1 <- c(eigen(cov(Hidden2))[[2]][,1])%*%as.matrix(t(Hidden2))
PCA2 <- c(eigen(cov(Hidden2))[[2]][,2])%*%as.matrix(t(Hidden2))
PCA <- as.data.frame(t(rbind(PCA1, PCA2)))
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
PCA1 <- c(eigen(cov(Hidden1))[[2]][,1])%*%as.matrix(t(Hidden1))
PCA2 <- c(eigen(cov(Hidden1))[[2]][,2])%*%as.matrix(t(Hidden1))
PCA <- as.data.frame(t(rbind(PCA1, PCA2)))
ggplot(PCA, aes(x = rev(V1), y = V2)) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
ggplot(PCA, aes(x = rev(V1), y = rev(V2))) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
ggplot(PCA, aes(x = V2, y = V1)) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
PCA1 <- c(eigen(cov(Hidden2))[[2]][,1])%*%as.matrix(t(Hidden2))
PCA2 <- c(eigen(cov(Hidden2))[[2]][,2])%*%as.matrix(t(Hidden2))
PCA <- as.data.frame(t(rbind(PCA1, PCA2)))
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
source('~/.active-rstudio-document', echo=TRUE)
install.packages('ellipse', dependencies = T)
install.packages('animation', dependencies = T)
library(ellipse)
library(animation)
r <- 0.2
ani.options(loop = FALSE)
saveHTML(power(r), interval = 0.8)
?while
()
?while()
source('PowerMethod.R')
XdataMat <- RandomData(2,100)
library(ggplot2)
library(ggfortify)
library(reshape2)
library(colorspace)
library(GGally)
source('RandomData.R')
source('RotationVec.R')
source('PlotSamples.R')
source('IterEigv.R')
source('PlotConv.R')
source('PlotEigen.R')
source('PowerMethod.R')
XdataMat <- RandomData(2,100)
PowerMethod(XdataMat)
source('PowerMethod.R')
PowerMethod(XdataMat)
eigen(cov(XdataMat))
eigen(cov(t(XdataMat)))
PowerMethod(XdataMat)
v <- PowerMethod(XdataMat)
v%*%cov(t(XdataMat))%*%t(v)
t(v)%*%cov(t(XdataMat))%*%v
source('PowerMethod.R')
v <- PowerMethod(XdataMat)
v
source('PowerMethod.R')
v <- PowerMethod(XdataMat, 1)
v
v <- PowerMethod(XdataMat, 2)
v
eigen(cov(t(XdataMat)))
v <- PowerMethod(XdataMat, 2)
v
PowerMethod(XdataMat, 2)
# Aufgabe 2
PowerMethod(XdataMat, 2)
nEvs
nEvs <- 2
CovM <- cov(t(XdataMat))
v <- 0
eps <- 0.001
itmax <- 100
count <- 1
EigVec <- matrix(0, nrow = nrow(CovM), ncol = nEvs)
EigVal <- rep(0, times = nEvs)
v <- c(runif(nrow(CovM)))
while((count < itmax) || (ops > eps)){
w <- CovM%*%v
w <- w/(sqrt(sum(w^2)))
ops <- max(abs(v - w))
v <- w
count <- count +1
}
View(v)
EigVec[,i] <- v
i <-1
EigVec[,i] <- v
EigVal[i] <- t(v)%*%CovM%*%v
View(EigVec)
t(EigVec[,i])
EigVal[i]*EigVec[,i]%*%t(EigVec[,i])
CovM
CovM - EigVal[i]*EigVec[,i]%*%t(EigVec[,i])
CovM <- CovM - EigVal[i]*EigVec[,i]%*%t(EigVec[,i])
View(CovM)
v <- c(runif(nrow(CovM)))
while((count < itmax) || (ops > eps)){
w <- CovM%*%v
w <- w/(sqrt(sum(w^2)))
ops <- max(abs(v - w))
v <- w
count <- count +1
}
i <- 2
EigVec[,i] <- v
EigVal[i] <- t(v)%*%CovM%*%v
View(EigVec)
CovM <- cov(t(XdataMat))
v <- 0
eps <- 0.001
itmax <- 100
count <- 1
EigVec <- matrix(0, nrow = nrow(CovM), ncol = nEvs)
EigVal <- rep(0, times = nEvs)
i <- 1
while((count < itmax) | (ops > eps)){
w <- CovM%*%v
w <- w/(sqrt(sum(w^2)))
ops <- max(abs(v - w))
v <- w
count <- count +1
}
v <- c(runif(nrow(CovM)))
while((count < itmax) | (ops > eps)){
w <- CovM%*%v
w <- w/(sqrt(sum(w^2)))
ops <- max(abs(v - w))
v <- w
count <- count +1
}
View(CovM)
EigVec[,i] <- v
EigVal[i] <- t(v)%*%CovM%*%v
View(EigVec)
EigVal[i]*EigVec[,i]%*%t(EigVec[,i])
CovM1 <- CovM - EigVal[i]*EigVec[,i]%*%t(EigVec[,i])
v <- c(runif(nrow(CovM)))
while((count < itmax) | (ops > eps)){
w <- CovM1%*%v
w <- w/(sqrt(sum(w^2)))
ops <- max(abs(v - w))
v <- w
count <- count +1
}
EigVec[,i] <- v
EigVal[i] <- t(v)%*%CovM%*%v
v <- c(runif(nrow(CovM)))
while((count < itmax) | (ops > eps)){
w <- CovM%*%v
w <- w/(sqrt(sum(w^2)))
ops <- max(abs(v - w))
v <- w
count <- count +1
}
EigVec[,i] <- v
EigVal[i] <- t(v)%*%CovM%*%v
v <- c(runif(nrow(CovM)))
while((count < itmax) | (ops > eps)){
w <- CovM1%*%v
w <- w/(sqrt(sum(w^2)))
ops <- max(abs(v - w))
v <- w
count <- count +1
}
i <-2
EigVec[,i] <- v
EigVal[i] <- t(v)%*%CovM%*%v
View(EigVec)
EigVec[,i]%*%t(EigVec[,i])
eigen(cov(t(XdataMat)))
PowerMethod(XdataMat, 2)
EigVec[,i]%*%t(EigVec[,i])
m <- 13
IEigV <- IterEigv(CovMat, start, m)
PowerMethod(XdataMat, 2)
PowerMethod(XdataMat, 2)
PowerMethod(XdataMat, 2)
PowerMethod(XdataMat, 2)
source('RandomData.R')
source('RotationVec.R')
source('PlotSamples.R')
source('IterEigv.R')
source('PlotConv.R')
source('PlotEigen.R')
source('PowerMethod.R')
XdataMat <- RandomData(2,100)
eigen(cov(t(XdataMat)))
PowerMethod(XdataMat, 2)
PowerMethod(XdataMat, 2)
source('PowerMethod.R')
PowerMethod(XdataMat, 2)
eigen(cov(t(XdataMat)))
eigen(cov(t(XdataMat)))
PowerMethod(XdataMat, 2)
PowerMethod(XdataMat, 2)
eigen(cov(t(XdataMat)))
XdataMat <- RandomData(3,100)
XdataMat
CovMat <- cov(t(XdataMat))
CovMat
eigen(cov(t(XdataMat)))
PowerMethod(XdataMat, 3)
Hidden1 <- as.data.frame(t(read.csv('Hidden1.csv')))
Hidden2 <- as.data.frame(t(read.csv('Hidden2.csv')))
# (a)
# Density of variables in Hidden1
H1 <- melt(Hidden1)
ggplot(H1, aes(H1$value)) +
geom_histogram(breaks=seq(min(H1$value), max(H1$value), by =10),
col="black",
aes(fill=..count..)) + theme_bw(15) +
facet_wrap(~ variable)
# Density of variables in Hidden1
H2 <- melt(Hidden2)
ggplot(H2, aes(H2$value)) +
geom_histogram(breaks=seq(min(H1$value), max(H1$value), by =10),
col="black",
aes(fill=..count..)) + theme_bw(15) +
facet_wrap(~ variable)
PlotEigen(Hidden1)
PlotEigen(Hidden2)
# (d)
PCA1 <- c(eigen(cov(Hidden1))[[2]][,1])%*%as.matrix(t(Hidden1))
PCA2 <- c(eigen(cov(Hidden1))[[2]][,2])%*%as.matrix(t(Hidden1))
PCA <- as.data.frame(t(rbind(PCA1, PCA2)))
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
PCA1 <- c(eigen(cov(Hidden2))[[2]][,1])%*%as.matrix(t(Hidden2))
PCA2 <- c(eigen(cov(Hidden2))[[2]][,2])%*%as.matrix(t(Hidden2))
PCA <- as.data.frame(t(rbind(PCA1, PCA2)))
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
library(ggplot2)
library(ggfortify)
library(reshape2)
library(colorspace)
library(GGally)
# Aufgabe 1
# (a)
source('RandomData.R')
source('RotationVec.R')
source('PlotSamples.R')
source('IterEigv.R')
source('PlotConv.R')
source('PlotEigen.R')
source('PowerMethod.R')
# Generatign random data
TransMat <- matrix(c(0.25, 1.299, 0.433, 0.75), nrow = 2, byrow = T)
XdataMat <- TransMat%*%RandomData(2,100)
TransMat <- matrix(c(0.25, 1.299, -0.433, 0.75), nrow = 2, byrow = T)
XdataMat <- TransMat%*%RandomData(2,100)
# Centering Data
XdataMatCent <- XdataMat - mean(XdataMat)
# Calculation of covariance matrix
CovMat <- cov(t(XdataMat))
# rotation of covariance matrix
alphaAngle <- c(seq(1,360))
CovMatR <- sapply(alphaAngle, RotationVec, CovMat)
# Correlation of rotation angle and variance
autoplot(ts(CovMatR)) + theme_bw(12)+ geom_hline(yintercept = (1/12), color = 'darkblue')
# Comparing different sample sizes
Samples <- c(100, 1000, 10000, 100000)
Output <- matrix(0, ncol = 360, nrow = 4)
alphaAngle <- c(seq(1,360))
count <- 1
for(i in Samples){
XdataMat <- TransMat%*%RandomData(2,i)
CovMat <- cov(t(XdataMat))
CovMatR <- sapply(alphaAngle, RotationVec, CovMat)
Output[count,] <- CovMatR
count <- count +1
}
# Illustration of rotation angle and sample sizes
PlotSamples(Output)
# (b)
# generating data and cov matrix
XdataMat <- RandomData(2,100)
CovMat <- cov(t(XdataMat))
# Iterative computation of eigenvectors
start <- c(1,0.7)
m <- 13
IEigV <- IterEigv(CovMat, start, m)
# Illustration of Convergence
PlotConv(IEigV, XdataMat)
###################################### Sheet 2 ##################################################
library(ggplot2)
library(ggfortify)
library(reshape2)
library(colorspace)
library(GGally)
# Aufgabe 1
# (a)
source('RandomData.R')
source('RotationVec.R')
source('PlotSamples.R')
source('IterEigv.R')
source('PlotConv.R')
source('PlotEigen.R')
source('PowerMethod.R')
# Generatign random data
TransMat <- matrix(c(0.25, 1.299, -0.433, 0.75), nrow = 2, byrow = T)
XdataMat <- TransMat%*%RandomData(2,100)
# Centering Data
XdataMatCent <- XdataMat - mean(XdataMat)
# Calculation of covariance matrix
CovMat <- cov(t(XdataMat))
# rotation of covariance matrix
alphaAngle <- c(seq(1,360))
CovMatR <- sapply(alphaAngle, RotationVec, CovMat)
# Correlation of rotation angle and variance
autoplot(ts(CovMatR)) + theme_bw(12)+ geom_hline(yintercept = (1/12), color = 'darkblue')
# Comparing different sample sizes
Samples <- c(100, 1000, 10000, 100000)
Output <- matrix(0, ncol = 360, nrow = 4)
alphaAngle <- c(seq(1,360))
count <- 1
for(i in Samples){
XdataMat <- TransMat%*%RandomData(2,i)
CovMat <- cov(t(XdataMat))
CovMatR <- sapply(alphaAngle, RotationVec, CovMat)
Output[count,] <- CovMatR
count <- count +1
}
# Illustration of rotation angle and sample sizes
PlotSamples(Output)
# (b)
# generating data and cov matrix
XdataMat <- RandomData(2,100)
CovMat <- cov(t(XdataMat))
# Iterative computation of eigenvectors
start <- c(1,0.7)
m <- 13
IEigV <- IterEigv(CovMat, start, m)
# Illustration of Convergence
PlotConv(IEigV, XdataMat)
m <- 20
IEigV <- IterEigv(CovMat, start, m)
# Illustration of Convergence
PlotConv(IEigV, XdataMat)
# (d)
# Comparison of R implemented eigenvactor calculation
# and own implementation of iterative power method
eigen(cov(t(XdataMat)))
PowerMethod(XdataMat, 2)
H1 <- melt(Hidden1)
ggplot(H1, aes(H1$value)) +
geom_histogram(breaks=seq(min(H1$value), max(H1$value), by =10),
col="black",
Hidden1 <- as.data.frame(t(read.csv('Hidden1.csv')))
Hidden2 <- as.data.frame(t(read.csv('Hidden2.csv')))
Hidden1 <- as.data.frame(t(read.csv('Hidden1.csv')))
Hidden2 <- as.data.frame(t(read.csv('Hidden2.csv')))
# (a)
# Density of variables in Hidden1
H1 <- melt(Hidden1)
ggplot(H1, aes(H1$value)) +
geom_histogram(breaks=seq(min(H1$value), max(H1$value), by =10),
col="black",
aes(fill=..count..)) + theme_bw(15) +
facet_wrap(~ variable)
# Density of variables in Hidden1
H2 <- melt(Hidden2)
ggplot(H2, aes(H2$value)) +
geom_histogram(breaks=seq(min(H1$value), max(H1$value), by =10),
col="black",
aes(fill=..count..)) + theme_bw(15) +
facet_wrap(~ variable)
# (b)
# Pairwise scatterplot
ggpairs(Hidden1)
# (c)
# Eigenvalues
PlotEigen(Hidden1)
PlotEigen(Hidden2)
# (d)
PCA1 <- c(eigen(cov(Hidden1))[[2]][,1])%*%as.matrix(t(Hidden1))
PCA2 <- c(eigen(cov(Hidden1))[[2]][,2])%*%as.matrix(t(Hidden1))
PCA <- as.data.frame(t(rbind(PCA1, PCA2)))
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'x1', y = 'x2')
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'z1', y = 'z2')
PCA1 <- c(eigen(cov(Hidden2))[[2]][,1])%*%as.matrix(t(Hidden2))
PCA2 <- c(eigen(cov(Hidden2))[[2]][,2])%*%as.matrix(t(Hidden2))
PCA <- as.data.frame(t(rbind(PCA1, PCA2)))
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'z1', y = 'z2')
library(ggplot2)
library(ggfortify)
library(reshape2)
library(colorspace)
library(GGally)
# Aufgabe 1
# (a)
source('RandomData.R')
source('RotationVec.R')
source('PlotSamples.R')
source('IterEigv.R')
source('PlotConv.R')
source('PlotEigen.R')
source('PowerMethod.R')
library(ggplot2)
library(ggfortify)
library(reshape2)
library(colorspace)
library(GGally)
source('RandomData.R')
source('RotationVec.R')
source('PlotSamples.R')
source('IterEigv.R')
source('PlotConv.R')
source('PlotEigen.R')
source('PowerMethod.R')
Hidden1 <- as.data.frame(t(read.csv('Hidden1.csv', header = F)))
Hidden2 <- as.data.frame(t(read.csv('Hidden2.csv', header = F)))
# (a)
# Density of variables in Hidden1
H1 <- melt(Hidden1)
ggplot(H1, aes(H1$value)) +
geom_histogram(breaks=seq(min(H1$value), max(H1$value), by =10),
col="black",
aes(fill=..count..)) + theme_bw(15) +
facet_wrap(~ variable)
# Density of variables in Hidden1
H2 <- melt(Hidden2)
ggplot(H2, aes(H2$value)) +
geom_histogram(breaks=seq(min(H1$value), max(H1$value), by =10),
col="black",
aes(fill=..count..)) + theme_bw(15) +
facet_wrap(~ variable)
PlotEigen(Hidden1)
PlotEigen(Hidden2)
source('PlotEigen.R')
PlotEigen(Hidden1)
PlotEigen(Hidden2)
# (d)
PCA1 <- c(eigen(cov(Hidden1))[[2]][,1])%*%as.matrix(t(Hidden1))
PCA2 <- c(eigen(cov(Hidden1))[[2]][,2])%*%as.matrix(t(Hidden1))
PCA <- as.data.frame(t(rbind(PCA1, PCA2)))
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'z1', y = 'z2')
PCA1 <- c(eigen(cov(Hidden2))[[2]][,1])%*%as.matrix(t(Hidden2))
PCA2 <- c(eigen(cov(Hidden2))[[2]][,2])%*%as.matrix(t(Hidden2))
PCA <- as.data.frame(t(rbind(PCA1, PCA2)))
ggplot(PCA, aes(x = V1, y = V2)) + geom_point() + theme_bw(15) + labs(x = 'z1', y = 'z2')
###################################### Sheet 2 ##################################################
library(ggplot2)
library(ggfortify)
library(reshape2)
library(colorspace)
library(GGally)
# Aufgabe 1
# (a)
source('RandomData.R')
source('RotationVec.R')
source('PlotSamples.R')
source('IterEigv.R')
source('PlotConv.R')
source('PlotEigen.R')
source('PowerMethod.R')
# Generatign random data
TransMat <- matrix(c(0.25, 1.299, -0.433, 0.75), nrow = 2, byrow = T)
XdataMat <- TransMat%*%RandomData(2,100)
# Centering Data
XdataMatCent <- XdataMat - mean(XdataMat)
# Calculation of covariance matrix
CovMat <- cov(t(XdataMat))
# rotation of covariance matrix
alphaAngle <- c(seq(1,360))
CovMatR <- sapply(alphaAngle, RotationVec, CovMat)
# Correlation of rotation angle and variance
autoplot(ts(CovMatR)) + theme_bw(12)+ geom_hline(yintercept = (1/12), color = 'darkblue')
# Comparing different sample sizes
Samples <- c(100, 1000, 10000, 100000)
Output <- matrix(0, ncol = 360, nrow = 4)
alphaAngle <- c(seq(1,360))
count <- 1
for(i in Samples){
XdataMat <- TransMat%*%RandomData(2,i)
CovMat <- cov(t(XdataMat))
CovMatR <- sapply(alphaAngle, RotationVec, CovMat)
Output[count,] <- CovMatR
count <- count +1
}
# Illustration of rotation angle and sample sizes
PlotSamples(Output)
source('Plotting.R')
XdataMatCentRMax <- XdataMatCentR[, which.max(XdataMatCentR[1,])]
alphaAngle <- c(seq(1,360))
XdataMatCentR <- sapply(alphaAngle, Rotation, XdataMatCent)
# (b)
# generating data and cov matrix
XdataMat <- RandomData(2,100)
CovMat <- cov(t(XdataMat))
# Iterative computation of eigenvectors
start <- c(1,0.7)
m <- 20
IEigV <- IterEigv(CovMat, start, m)
# Illustration of Convergence
PlotConv(IEigV, XdataMat)
# (d)
# Comparison of R implemented eigenvactor calculation
# and own implementation of iterative power method
eigen(cov(t(XdataMat)))
PowerMethod(XdataMat, 2)
m <- 5
IEigV <- IterEigv(CovMat, start, m)
# Illustration of Convergence
PlotConv(IEigV, XdataMat)
start <- c(1,0.1)
m <- 15
IEigV <- IterEigv(CovMat, start, m)
# Illustration of Convergence
PlotConv(IEigV, XdataMat)
